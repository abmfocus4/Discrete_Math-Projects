                             # Probabilities -- a Visit to Vegas

## Introduction:

The goal of this project is to become familiar with probabilities and the use of random number
generators to simulate various systems. The examples I have used are based on a theoretical
visit to the casinos in Las Vegas, Nevada.

*Note that I are not encouraging actual gambling, or actual trips to Vegas.

Part 1 - Dice
Our first stop is the Craps table. Craps is a very old game in which players wager on the
outcome of rolling a pair of dice. It is one of the most popular games in the world, and is played
everywhere from alleyways to high-end casinos. Details about the game can be found here:
https://en.wikipedia.org/wiki/Craps

This function uses a random number generator to produce a random roll of a die (the singular of dice) and return a value in the range of 1 to 6.
The seed of the random number is chosen to be the current time, to ensure considerable randomness
between runs of the program.

Some questions to ponder on:

Question 1: Roll the single die ten times. Keep track of how often each value comes up, and
print out a list giving the fraction of the time each value appears. Repeat this experiment, but roll
the die a thousand times. Repeat it again, one hundred thousand times.

Question 2: If you roll the dice a hundred times, you would expect half of them would be low
numbers (1, 2 or 3) and half of them would be high numbers (4, 5 and 6). How often does this
actually happen? Run the experiment ten thousand times and print out the fraction of the time
that there is an even split between high numbers and low numbers. 

Question 3: Craps is a very complicated game with numerous rules. However, much of it comes
down to the probability of various rolls. For example, if you roll a pair of dice and the total is
either 7 or 11, it’s called a “natural”. If you roll a total of 3, or two 1’s (“snake eyes”), or two 6’s (“boxcars”), it’s called “crapping out”. Many popular board games (e.g. Settlers of Catan) also
rely on the non-linear distribution of values generated by a pair of rolled dice.
Roll a pair of dice one hundred thousand times and find out what percentage of the time each
total value comes up. Print out the value (in the range from 2 to 12) and the percentage of times
it appears for help!


Part 2 - Cards

Our next stop is the Blackjack table. Blackjack is one of the most popular card games in the
world, on a par with Poker. It has been around for almost five hundred years, and is found in
every casino in the world. Sometimes it’s called “twenty one” or “vingt et un”, but it’s the same
game.

In Blackjack, all players are playing individually against the dealer. Each player is trying to get
more points than the dealer does, without going over 21. The players, including the dealer, are
initially given two cards. All of the players’ cards are dealt face up, but one of the dealer’s cards
is face down. Each player can “hit” (request an additional card) as many times as they want. If
their total is exactly 21, they have “blackjack” and they win that hand. If they go over 21, they
“bust” and lose that hand. If the player is satisfied with their hand, they “stand” (i.e. stop
requesting cards). Once all players are at that point, the dealer turns over their face-down card
and attempts to beat the players by drawing additional cards if needed. Regardless, the dealer
must hit if his total is 16 or less and must stand if his total is 17 or more.
Cards all have their pip value, except for the Jack, Queen and King which count as ten, and the
Ace which can count as either one or eleven (player’s choice). So for example, if your first two
cards are a Queen and an Ace, you have 21 and win with a blackjack.
(Note that there are many additional variations, such as splitting your hand, but we will not
consider those for this exercise).

First I have come up with a representation for both an individual card and
for a deck of cards. Next, I implemented a shuffling function, such Fisher-Yates (also
known as the Knuth shuffling algorithm).

Question 4: Knowing when to stand
The central game mechanic of Blackjack is deciding when to hit and when to stand. There are
complicated rules for this that take into account what card the dealer is showing, but in this case
we’ll keep it simple.
Pick a threshold. Shuffle the deck, and deal cards to the player until they either reach that
threshold or bust, keeping track of the percentage of the time that they bust. Do this for 100,00
hands (i.e. they hit their threshold or bust 10,000 times). Whenever the deck is empty, shuffle it
again and continue dealing. Repeat this experiment, with threshold values from 10 to 20
inclusive. The output consists of a series of lines, each containing a pair of the numbers
(the threshold and the bust fraction, which will be a value between 0 and 1). 

By means of the simulator we will answer question like :

At what value should you stand? You want to choose the highest value which still gives you a reasonable
chance of not busting.


Question 5: Card counting

Important note: The use of card-counting software is illegal in the State of Nevada, and
may be illegal in other places that allow gambling.

The idea behind card-counting is that when more low-valued cards have been dealt, the
probability of high-value cards being dealt next will rise (since there are a larger proportion of
high-valued cards remaining in the deck). High-value cards benefit the player more than the
house, since the dealer is more likely to bust by drawing one. You should (obviously) wager
higher when the odds are in your favour, and lower when they’re against you.
There are many card-counting methods out there, and some of them are quite elaborate.

However, for this exercise I’ll be sticking to a simple Hi-Lo system.

For this program I have simulated an actual game of Blackjack. Shuffle the deck, and deal
one card to the dealer and two cards to each of three other players sitting around a table. We
will not be simulating these other players, and we’ll assume that they all choose to stand
regardless of the values of their cards.

All of these cards are dealt face up, and therefore will be considered by the card-counting
algorithm.

Deal cards to yourself until you bust, hit blackjack or decide to stand (a decision which will be
based on the result you got from Question 4). Then deal cards to the dealer until they either hit
Blackjack, bust or lose. Remember that the dealer must hit if their total is 16 or less, and must
stand if their total is 17 or more. The dealer does not employ any kind of strategy.
The player can win with a blackjack, or if the dealer busts. The player can lose by busting, or by
the dealer coming closer to 21 than the player did.

Whenever the deck runs out of cards, the deck is reshuffled and the game continues.
Before each hand is dealt, the player must decide how much to wager. This is where they use
card-counting.

As cards are dealt (to anyone), compute a running total for the deck by adding one point for
every 2, 3, 4, 5 or 6 that is dealt and subtracting one point for each 10, jack, queen, king or ace.
Whenever the deck is reshuffled, reset your count back to zero.

Before each deal, decide whether to bet high, low or average. If the card count is less than zero,
you should bet low. If it’s greater than zero, you should bet high. If it’s zero, you should place an
average bet. When the deck is reshuffled, reset your count to zero.

Keep track of how often you made the right decision, and how often you made the wrong
decision. If you bet high or middle and won, or bet low and lost, your decision was correct.
Otherwise, your decision was incorrect.

Go through 10,000 hands, reshuffling the deck when it’s empty, and keep track of how often
your betting decision was correct. Print out a floating point number giving the fraction of the
times you made the right decision.
